#ダミーデータで位置，速度，加速度のカルマンフィルタの精度を検証するのに使っていた
#パラメータQやRをいじることで精度を上げていた

import numpy as np
import matplotlib.pyplot as plt
T=[]
dt = 0.1
def kalman_filter(A, B, H, Q, R, x0, P0, measurements):
    n = A.shape[0] # 状態ベクトルの次元
    m = len(measurements) # 観測の回数

    # 初期化
    x = x0
    P = P0
    t = 0
    filtered_states = []
    prediction_states = [[0, 0, 0, 0, 0, 0]]

    for i in range(m):
        # 予測ステップ
        x_hat = np.dot(A, x)
        P_hat = np.dot(np.dot(A, P), A.T) + Q

        # カルマンゲインの計算
        K = np.dot(np.dot(P_hat, H.T), np.linalg.inv(np.dot(np.dot(H, P_hat), H.T) + R))

        # 観測更新ステップ
        z = measurements[i]
        x = x_hat + np.dot(K, z - np.dot(H, x_hat))
        P = P_hat - np.dot(np.dot(K, H), P_hat)
        
        #print(z)
        #print(np.dot(H, x_hat))
        #print(z - np.dot(H, x_hat))

        t=t+dt

        #1期先予測ステップ
        h_pre1 = np.dot(A, x)

        prediction_states.append(h_pre1)
        filtered_states.append(x)
        T.append(t)

    #prediction_states = np.delete(prediction_states, -1)
    filtered_states.append(x)    #prediction_statesだけ1つ要素が多いので前回と同じ推定値を追加
    T.append(t+dt)
    print(filtered_states)
    return np.array(filtered_states), np.array(prediction_states), np.array(T)
    


# システム行列
A = np.array([[1, 1*dt, 0.5*dt*dt, 0, 0, 0],
              [0, 1, 1*dt, 0, 0, 0],
              [0, 0, 1, 0, 0, 0],
              [0, 0, 0, 1, 1*dt, 0.5*dt*dt],
              [0, 0, 0, 0, 1, 1*dt],
              [0, 0, 0, 0, 0, 1]])

B = np.zeros((6, 1))

# 観測行列 (x座標とy座標のみを観測)
H = np.array([[1, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0]])

# プロセスノイズ共分散行列
Q = np.eye(6) * 1

# 観測ノイズ共分散行列
R = np.eye(2) * 0

# 初期状態推定
x0 = np.array([0, 0, 0, 0, 0, 0])
P0 = np.eye(6)

# ダミーの観測データ
measurements = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [6, 8],[6,9],[5,10],[4,11],[3,12],[2,13], [1, 14],[0,15],[-1,16],[-2,17],[-1,17],[1,17],[3,17],[5,17],[7,17],[9,17],[11,17],[13,17]])
measurements = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8],[8,9],[9,10],[10,11],[11,12],[12,13], [13, 14],[14,15],[15,16],[16,17],[17,17],[18,17],[19,17],[20,17],[21,17],[22,17],[23,17],[24,17]])
measurements = np.array([[801.3456790123457, 507.641975308642], [805.4329501915709, 511.9463601532567], [809.9490196078432, 512.4901960784314], [808.3427419354839, 508.0725806451613], [802.3790322580645, 515.6975806451613], [782.1749049429658, 508.0608365019011], [775.1918367346939, 504.37142857142857], [748.5668016194332, 502.497975708502], [732.9193548387096, 499.21370967741933], [714.0852713178294, 494.24418604651163], [682.792372881356, 489.83474576271186], [663.6567796610169, 490.9194915254237], [627.3265306122449, 487.49795918367346], [608.103305785124, 486.35537190082647], [589.399209486166, 488.79446640316206], [566.5653846153846, 491.8], [525.4789272030652, 491.7049808429119], [503.8095238095238, 496.96336996337], [487.5529010238908, 497.99658703071674], [456.71974522292993, 503.8248407643312], [442.70032573289905, 509.30944625407164], [430.53551912568304, 509.69945355191254], [414.03465346534654, 512.9480198019802], [412.7783505154639, 516.9278350515464], [411.36895674300257, 515.4529262086514], [423.17401960784315, 508.90441176470586], [432.7071960297767, 502.9478908188586], [446.319587628866, 494.1726804123711], [463.3037037037037, 486.42716049382716], [481.7004950495049, 483.76485148514854], [522.910290237467, 471.7651715039578], [573.4503105590062, 468.0372670807453], [601.3265993265993, 465.6094276094276], [633.1503496503497, 465.458041958042], [696.4660633484162, 476.33031674208144], [726.3304721030042, 481.0257510729614], [752.3243243243244, 487.1171171171171], [779.170731707317, 490.3943089430894], [812.3918367346939, 505.53877551020406], [826.2214285714285, 509.25357142857143], [838.0359712230215, 523.0467625899281], [848.226480836237, 519.3797909407665], [848.2361111111111, 526.1736111111111], [844.2275862068966, 525.6], [835.3274021352313, 513.8932384341637], [812.9061371841156, 518.2490974729242], [780.4340425531915, 511.5148936170213], [755.9163346613545, 502.0239043824701], [730.8552631578947, 500.6842105263158], [684.858407079646, 495.5840707964602], [663.1581395348837, 501.2139534883721], [611.7586206896551, 495.6594827586207], [589.6752767527676, 498.8966789667897], [567.868, 504.728], [546.021978021978, 509.2234432234432], [506.4967105263158, 517.4243421052631], [485.3545150501672, 522.8896321070234], [470.0060606060606, 529.6848484848484], [440.5335195530726, 534.4804469273743], [429.53913043478263, 543.1507246376812], [424.12680115273776, 544.0461095100865], [419.36102236421726, 547.1277955271565], [422.21597633136093, 547.5207100591716], [427.46260387811634, 541.0831024930748], [435.3809523809524, 539.8005952380952], [459.5029069767442, 528.25], [474.53739612188366, 521.1772853185596], [489.20059880239523, 516.0598802395209], [505.2012383900929, 508.8111455108359], [540.362676056338, 501.44718309859155], [557.9615384615385, 495.5699300699301], [577.9930555555555, 492.3541666666667], [618.6428571428571, 486.73308270676694], [638.5577689243028, 490.7450199203187], [659.7272727272727, 487.96280991735534], [707.2938596491229, 495.5394736842105], [729.866935483871, 487.16129032258067], [756.5450643776824, 488.5579399141631], [778.1032863849765, 491.3145539906103], [816.4566037735849, 500.7169811320755], [835.9912663755458, 508.7510917030568], [847.3269230769231, 516.7269230769231], [861.8591065292096, 529.9140893470791]])
#print(measurements)

# カルマンフィルタの実行
filtered_states, prediction_states, T = kalman_filter(A, B, H, Q, R, x0, P0, measurements)
#measurements = np.append(measurements,[0,0], axis=0)
#prediction_statesだけ1つ要素が多いので0,0を追加
measurements = np.vstack([measurements, np.array([0, 0])])

# 結果の表示
#print(filtered_states)
#print(prediction_states)


filtered_states_x = filtered_states[:, 0]
prediction_states_x = prediction_states[:, 0]
#print(type(filtered_states))  #np.ndarray


plt.plot(T,filtered_states_x, 'o', color='orange', linewidth=1.0, label='Estimation')
plt.plot(T,measurements[:,0], '*',color='green',label='Obvervation')
plt.plot(T,prediction_states_x, '*',color='blue',label='Prediction')
# plt.errorbar(T,XT, yerr=XTERR, capsize=5, fmt='o', color='red', ecolor='orange',label='Estimate')
plt.xlabel('T')
plt.ylabel('X')
plt.grid(True)
plt.legend()
plt.show()

